type Product{
	
	id:ID,
	name:String,
	category:String,
	price:Float,
	stock:Int

}

input ProductDTO {
	
	name:String,
	category:String,
	price:Float,
	stock:Int
}

type User {

	userId:ID!
	name:String
	phone:String
	email:String
	password:String
	orders:[Order]
}

input UserDTO {

   
  name:String
  phone:String
  email:String
  password:String

}


type Order{

	orderId:ID!
	orderDetails:String
	address:String
	price:Float
	user:User
}

input OrderDTO{
	userID: ID!
	orderDetails:String
	address:String
	price:Float
	

}

type Query {

	getAllProducts:[Product]
	getProductByCategory(category:String):[Product]
	
	getUserById(id:ID!):User
	getAllUsers:[User]
	
	getOrdersByUserId(userId: ID!):[Order]
	getOrdersByOrderId(orderId:ID!):Order
	getAllOrders:[Order]
	
}

type Mutation{

	createProduct(productDTO:ProductDTO):Product
	updateProduct(productDTO:ProductDTO ,id:ID!):Product
	updateStock(id:ID!,stock:Int):Product 
	updateStockShipment(id:ID!,stock:Int):Product
	deleteProductById(id:ID!):String
	
	createUser(name:String,phone:String,email:String,password:String):User
	createUserBYUserDTO(userDTO:UserDTO):User
	updateUser(userDTO:UserDTO, id:ID!):User
	deleteUser(id:ID!):String
	
	saveOrder(orderDTO: OrderDTO):Order
}